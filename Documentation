# A variable is a container for a value, which can be of various types

'''
This is a 
multiline comment
or docstring (used to define a functions purpose)
can be single or double quotes
'''

"""
VARIABLE RULES:
  - Variable names are case sensitive (name and NAME are different variables)
  - Must start with a letter or an underscore
  - Can have numbers but can not start with one
"""

#single assignments
a=1         #Int
b=2.5       #float          
c='hello'   #string
d=True      #bool

#multiple assignments
(x,y,z,v)=(3,4.5,'sneha',False)

#type check
print(type(x))

#casting
a=str(a)
print(type(a))

#Basic Math
s=x+y
print(s)



-------------------------------------------------------------------------------------------------------------
Strings


# Strings in python are surrounded by either single or double quotation marks. Let's look at string formatting and some string methods

name='sneha'
age=23

#concatenation
print('hello '+name +' and ur '+str(age) +' years old')

# String Formatting

#arguments by position
print('{},{},{}'.format('a','b',3.6))
print('{2},{1},{0}'.format('a','b','c'))


#Arguments by name
print('my name is {name} and my age is {age}'.format(name='anu',age='12'))
print('my name is {name} and my age is {age}'.format(name=name,age=age))


#F-string (only in 3.6+)
print(f'my name is {name} and i am {age} years old')

#string methods
s='hello there'
#capitalize
print(s.capitalize())

#uppercase
print(s.upper())

#lowercase
print(s.lower())

#Swap Case
p='Sneha'
print(p.swapcase())

#get length
print(len(s))

#replace
print(s.replace('hello',p))

#Count
print(s.count('e'))

#Starts with
print(s.startswith('hel'))

#Endss with
print(s.endswith('re'))

#split into list
print(s.split())

#Find position
print(s.find('r'))

#Is all alphanumeric
print(p.isalnum())

#Is all alphabetic
print(s.isalpha())

#Is all numeric
print(s.isnumeric())

----------------------------------------------------------------------------------------------------------------
Lists

# A List is a collection which is ordered and changeable. Allows duplicate members.

#Create List 
a=[1,'hello',True,2.5]

#create using constructors
b=list(('fruits','mist','me'))

#get Values
print(a,b)

#append to lists and inserting at a particular position
a.append('flowers')
a.insert(2,'i am at 2')
print(a)

#remove from list and pop from a particular position
a.remove(2.5)
a.pop(1)
print(a)

#reverse lists
a.reverse()
print(a)

#sort lists
b.sort()
print(b)

#reverse sort
b.sort(reverse=True)
print(b)

--------------------------------------------------------------------------------------------------------------

Tuples and sets


# A Tuple is a collection which is ordered and unchangeable. Allows duplicate members.

# Simple tuple
fruit_tuple = ('Apple', 'Orange', 'Mango')
# Using constructor
# fruit_tuple = tuple(('Apple', 'Orange', 'Mango'))

# Get single value
# print(fruit_tuple[1])

# Can not change value
# fruit_tuple[1] = 'Grape'

# Tuples with one value should have trailing comma
fruit_tuple_2 = ('Apple',)

del fruit_tuple_2

# Get length of tuple
# print(len(fruit_tuple_2))
 


# A Set is a collection which is unordered and unindexed. No duplicate members.

# Create set
fruit_set = {'Apple', 'Orange', 'Mango'}

# Check if in set
print('Apples' in fruit_set)

# Add to set
fruit_set.add('Grape')

# Remove from set
fruit_set.remove('Grape')

# Clear set
fruit_set.clear()

# Delete set
del fruit_set

print(fruit_set)
-------------------------------------------------------------------------------------------------------------------

DICTIONARY

# A Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.

# Simple dict
person = {
  'first_name': 'John',
  'last_name': 'Doe',
  'age': 30
}

# Using a constructor
# person = dict(first_name='John', last_name='Doe',age=30)

# Access value
print(person['first_name'])
print(person.get('last_name'))

# Add key/value
person['phone'] = '555-555-5555'

# Get keys
print(person.keys())

# Get items
print(person.items())

# Make copy
person2 = person.copy()
person2['city'] = 'Boston'

# Remove item
del(person['age'])
person.pop('phone')

# Clear
person.clear()

# Get length
print(len(person2))

print(person)

# List of dict
people = [
  {'name': 'Martha', 'age': 40},
  {'name': 'Bob', 'age': 20}
]
print(people[1]['name'])


------------------------------------------------------------------------------------------------------------------

FUNCTION

# A function is a block of code which only runs when it is called. In Python, we do not use parentheses and curly brackets, we use indentation with tabs or spaces

# Create function
def sayHello(name = 'Sam'):
  """
  Prints Hello and then name.
  """
  print('Hello ' + name)

# Return value
def getSum(num1, num2):
  total = num1 + num2
  return total

numSum = getSum(2, 3)

def addOneToNum(num):
  num += 1
  return num

num = 5
new_num = addOneToNum(num)
print(new_num)

# A lambda function is a small anonymous function.
# A lambda function can take any number of arguments, but can only have one expression. Very similar to JS arrow functions

getSum = lambda num1, num2 : num1 + num2
print(getSum(9, 2))

addOneToNum = lambda num : num + 1
print(addOneToNum(5))


-------------------------------------------------------------------------------------------------------------------------------------------
CONDITIONALS

# If/ Else conditions are used to decide to do something based on something being true or false

x = 10
y = 1

# Comparison Operators (==, !=, >, <, >=, <=) - Used to compare values

# Simple if
if x == y:
  print(f'{x} is equal to {y}')

# If/else
# if x > y:
#   print(f'{x} is greater than {y}')
# else:
#   print(f'{x} is less than {y}')
  
# elif
# if x > y:
#   print(f'{x} is greater than {y}')
# elif x == y:
#   print(f'{x} is equal to {y}')  
# else:
#   print(f'{x} is less than {y}')

# Nested if
# if x > 2:
#   if x <= 10:
#     print(f'{x} is less than 2 and greater than 10')
    

# Logical operators (and, or, not) - Used to combine conditional statements

# and
# if x > 2 and x <=10:
#   print(f'{x} is less than 2 and greater than 10')

# or
# if x > 2 or x <=10:
#   print(f'{x} is less than 2 or greater than 10')

# not
# if not(x == y):
#   print(f'{x} is not equal to {y}')


# Membership Operators (not, not in) - Membership operators are used to test if a sequence is presented in an object

numbers = [1,2,3,4,5]

# in
# if x in numbers:
#   print(x in numbers)

# in
# if x not in numbers:
#   print(x in numbers)


# Identity Operators (is, is not) - Compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:

# is
# if x is y:
#   print(x is y)


# is not
if x is not y:
  print(x is not y)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

LOOPS

# A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).

people = ['John', 'Will', 'Janet', 'Karen']

# Simple for loop
# for person in people:
#   print('Current person: ', person)

# Break out
# for person in people:
#   if person == 'Janet':
#     break
#   print('Current person: ', person)

# Continue
# for person in people:
#   if person == 'Janet':
#     continue
#   print('Current person: ', person)

# Range
# for i in range(len(people)):
#   print('Current Person: ', people[i])

# for i in range(0, 11):
#   print('Number ', i)

# While loops execute a set of statements as long as a condition is true.
count = 0
while count <= 10:
  print('Count: ', count)
  count += 1

----------------------------------------------------------------------------------------------------------------------

# Pip modules
# A module is basically a file containing a set of functions to include in your application. There are core python modules, modules you can install using the pip package manager (including Django) as well as custom modules

# Core modules
import datetime
from datetime import date
import time
from time import time

# Pip modules
import camelcase

# Custom modules
import validator
from validator import validate_email

# today = datetime.date.today()
today = date.today()
timestamp = time()

camel = camelcase.CamelCase()
text = 'hello there world'

email = 'test@test.com'
if validate_email(email):
  print('Email is valid')
else:
  print('Not an email')

****************************************************
VALIDATOR

# Example of a custom module to be imported

import re


def validate_email(email):
    if len(email) > 7:
        return bool(re.match("^.+@(\[?)[a-zA-Z0-9-.]+.([a-zA-Z]{2,3}|[0-9]{1,3})(]?)$", email))

******************************************************************************************************


-----------------------------------------------------------------------------------------------------------------------


